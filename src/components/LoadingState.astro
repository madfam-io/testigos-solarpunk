---
/**
 * Loading State Component - Testigos de Solarpunk
 * Enterprise-grade loading indicators with magazine cutout aesthetic
 *
 * @component LoadingState
 * @description Consistent loading states across the application
 * @author MADFAM
 * @version 0.3.0+enterprise
 */

import { useTranslations } from '@/i18n/config';
import type { Language } from '@/i18n/config';

interface Props {
  lang?: Language;
  message?: string;
  size?: 'sm' | 'md' | 'lg';
  type?: 'spinner' | 'dots' | 'skeleton';
  fullscreen?: boolean;
  compact?: boolean;
}

const {
  lang = 'es',
  message,
  size = 'md',
  type = 'spinner',
  fullscreen = false,
  compact = false,
} = Astro.props;

const t = useTranslations(lang);

const defaultMessage = message ?? t('status.loading');
---

<div
  class:list={[
    'loading-state',
    `loading-state--${size}`,
    `loading-state--${type}`,
    { 'loading-state--fullscreen': fullscreen },
    { 'loading-state--compact': compact },
  ]}
  role="status"
  aria-live="polite"
  aria-label={defaultMessage}
  data-loading-state
>
  <div class="loading-content">
    {
      type === 'spinner' && (
        <div class="loading-spinner">
          <span
            class="emoji-cutout emoji-lg theme-solar flutter"
            role="img"
            aria-hidden="true"
          >
            ðŸŒ±
          </span>
        </div>
      )
    }

    {
      type === 'dots' && (
        <div class="loading-dots">
          <span class="dot" />
          <span class="dot" />
          <span class="dot" />
        </div>
      )
    }

    {
      type === 'skeleton' && (
        <div class="loading-skeleton">
          <div class="skeleton-line skeleton-title" />
          <div class="skeleton-line skeleton-text" />
          <div class="skeleton-line skeleton-text short" />
        </div>
      )
    }

    {Boolean(message) && <p class="loading-message">{defaultMessage}</p>}
  </div>
</div>

<style>
  .loading-state {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: var(--space-lg);
  }

  /* Compact mode with reduced vertical spacing */
  .loading-state--compact {
    padding: var(--space-sm) var(--space-md);
  }

  .loading-state--compact.loading-state--fullscreen {
    padding: var(--space-md);
  }

  .loading-state--fullscreen {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(var(--bg-primary-rgb, 255, 255, 255), 0.9);
    backdrop-filter: blur(4px);
    z-index: 9999;
  }

  .loading-content {
    text-align: center;
    max-width: 300px;
  }

  /* Spinner variant */
  .loading-spinner {
    animation: float 2s ease-in-out infinite;
  }

  /* Compact spinner adjustments */
  .loading-state--compact .loading-spinner {
    animation: float-compact 2s ease-in-out infinite;
  }

  .loading-state--compact .emoji-cutout {
    font-size: 2rem !important; /* Smaller emoji in compact mode */
  }

  @keyframes float {
    0%,
    100% {
      transform: translateY(0);
    }
    50% {
      transform: translateY(-10px);
    }
  }

  @keyframes float-compact {
    0%,
    100% {
      transform: translateY(0);
    }
    50% {
      transform: translateY(-5px); /* Less vertical movement in compact mode */
    }
  }

  /* Dots variant */
  .loading-dots {
    display: flex;
    gap: 0.5rem;
    justify-content: center;
    margin-bottom: var(--space-md);
  }

  /* Compact dots adjustments */
  .loading-state--compact .loading-dots {
    gap: 0.375rem;
    margin-bottom: var(--space-sm);
  }

  .dot {
    width: 8px;
    height: 8px;
    background: var(--madfam-green);
    border-radius: 50%;
    animation: dotPulse 1.4s ease-in-out infinite both;
  }

  /* Compact dots are smaller */
  .loading-state--compact .dot {
    width: 6px;
    height: 6px;
  }

  .dot:nth-child(1) {
    animation-delay: -0.32s;
  }
  .dot:nth-child(2) {
    animation-delay: -0.16s;
  }
  .dot:nth-child(3) {
    animation-delay: 0s;
  }

  @keyframes dotPulse {
    0%,
    80%,
    100% {
      transform: scale(0.8);
      opacity: 0.6;
    }
    40% {
      transform: scale(1);
      opacity: 1;
    }
  }

  /* Skeleton variant */
  .loading-skeleton {
    width: 100%;
    max-width: 400px;
  }

  .skeleton-line {
    height: 1rem;
    background: linear-gradient(
      90deg,
      var(--bg-tertiary) 25%,
      var(--bg-secondary) 50%,
      var(--bg-tertiary) 75%
    );
    background-size: 200% 100%;
    border-radius: 4px;
    margin-bottom: 0.75rem;
    animation: skeletonShimmer 2s ease-in-out infinite;
  }

  /* Compact skeleton adjustments */
  .loading-state--compact .skeleton-line {
    height: 0.75rem;
    margin-bottom: 0.5rem;
  }

  .skeleton-title {
    height: 1.5rem;
    width: 60%;
  }

  .loading-state--compact .skeleton-title {
    height: 1rem;
  }

  .skeleton-text {
    width: 100%;
  }

  .skeleton-text.short {
    width: 70%;
  }

  @keyframes skeletonShimmer {
    0% {
      background-position: -200% 0;
    }
    100% {
      background-position: 200% 0;
    }
  }

  .loading-message {
    color: var(--text-secondary);
    font-size: 0.875rem;
    margin-top: var(--space-md);
    font-weight: 500;
  }

  /* Compact message adjustments */
  .loading-state--compact .loading-message {
    margin-top: var(--space-xs);
    font-size: 0.75rem;
  }

  /* Size variants */
  .loading-state--sm .loading-content {
    max-width: 200px;
  }

  .loading-state--sm .loading-message {
    font-size: 0.75rem;
  }

  .loading-state--lg .loading-content {
    max-width: 400px;
  }

  .loading-state--lg .loading-message {
    font-size: 1rem;
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .loading-spinner,
    .dot,
    .skeleton-line {
      animation: none;
    }

    .loading-spinner {
      opacity: 0.7;
    }
  }

  /* High contrast mode */
  @media (prefers-contrast: high) {
    .dot {
      background: currentColor;
    }

    .skeleton-line {
      background: var(--border-subtle);
    }
  }
</style>
