---
/**
 * @fileoverview MagazineCutoutImage Component
 *
 * Advanced image component with DIY magazine cutout aesthetic and AI placeholder generation.
 * Integrates with the emoji magazine cutout design system to create authentic-looking
 * paper cutouts with tape, worn edges, and vintage effects.
 *
 * Features:
 * - Automatic AI placeholder generation when src is not provided
 * - Magazine cutout styling with irregular edges
 * - Tape decorations and paper texture effects
 * - Responsive design with performance optimizations
 * - Accessibility support with proper loading states
 * - Fallback handling for failed image loads
 *
 * @component
 * @example
 * ```astro
 * // With custom image
 * <MagazineCutoutImage
 *   src="/images/hero.jpg"
 *   alt="Solar panel installation"
 *   width={600}
 *   height={400}
 *   theme="solar"
 *   interactive={true}
 * />
 *
 * // With AI placeholder
 * <MagazineCutoutImage
 *   alt="Community garden"
 *   width={400}
 *   height={300}
 *   type="location"
 *   prompt="vibrant community garden with solar panels"
 *   theme="green"
 *   flutter={true}
 * />
 * ```
 */

import { MagazineCutoutPlaceholderService } from '../services/MagazineCutoutPlaceholderService';
import type { PlaceholderType } from '../config/magazine-placeholders.config';
import { log } from '../utils/logger';

/**
 * Props interface for MagazineCutoutImage component
 *
 * @interface Props
 * @property {string} [src] - Image source URL. If not provided, generates AI placeholder
 * @property {string} alt - Alternative text for accessibility (required)
 * @property {number} width - Image width in pixels
 * @property {number} height - Image height in pixels
 * @property {PlaceholderType} [type='background'] - Type of placeholder to generate
 * @property {string} [prompt] - Custom prompt for AI generation. Falls back to alt text
 * @property {string} [class] - Additional CSS classes
 * @property {boolean} [eager=false] - Whether to load image eagerly (vs lazy loading)
 * @property {'emoji-sm' | 'emoji-md' | 'emoji-lg' | 'emoji-xl'} [cutoutStyle='emoji-md'] - Size preset
 * @property {'solar' | 'green' | 'purple' | 'community'} [theme] - Color theme
 * @property {'nav' | 'hero' | 'card' | 'button'} [context] - Usage context for styling
 * @property {boolean} [interactive=false] - Whether image responds to interactions
 * @property {boolean} [flutter=false] - Enable paper flutter animation
 */
export interface Props {
  src?: string;
  alt: string;
  width: number;
  height: number;
  type?: PlaceholderType;
  prompt?: string;
  class?: string;
  eager?: boolean;
  cutoutStyle?: 'emoji-sm' | 'emoji-md' | 'emoji-lg' | 'emoji-xl';
  theme?: 'solar' | 'green' | 'purple' | 'community';
  context?: 'nav' | 'hero' | 'card' | 'button';
  interactive?: boolean;
  flutter?: boolean;
}

// Extract and validate props with defaults
const {
  src,
  alt,
  width,
  height,
  type = 'background',
  prompt,
  class: className = '',
  eager = false,
  cutoutStyle = 'emoji-md',
  theme,
  context,
  interactive = false,
  flutter = false,
} = Astro.props;

/**
 * Placeholder generation logic
 * If no src is provided, generates an AI placeholder image
 * Falls back to SVG placeholder if AI generation fails
 */
let placeholderData = null;
let placeholderUrl = src;

if (src == null || src === '') {
  try {
    // Generate AI placeholder with magazine cutout aesthetic
    placeholderData =
      await MagazineCutoutPlaceholderService.generatePlaceholder({
        type,
        width,
        height,
        prompt: prompt ?? alt, // Use alt text as prompt if not specified
        priority: eager ? 'high' : 'normal',
      });
    placeholderUrl = placeholderData.url;
  } catch (error) {
    log.warn('Failed to generate placeholder', error, 'magazine-image');
    // SVG fallback with paper texture appearance
    placeholderUrl = `data:image/svg+xml,${encodeURIComponent(`
      <svg width="${width}" height="${height}" xmlns="http://www.w3.org/2000/svg">
        <rect width="100%" height="100%" fill="#F4E5D3"/>
        <text x="50%" y="50%" text-anchor="middle" font-family="serif" font-size="16" fill="var(--madfam-gray-600)">
          ${alt.replace(/[<>&"]/g, '')}
        </text>
      </svg>
    `)}`;
  }
}

/**
 * CSS class construction
 * Combines base classes with conditional modifiers
 */
const cssClasses = [
  'magazine-cutout-image',
  `emoji-cutout ${cutoutStyle}`,
  theme !== undefined ? `theme-${theme}` : '',
  context !== undefined ? `emoji-${context}` : '',
  interactive ? 'interactive' : '',
  flutter ? 'flutter' : '',
  className,
]
  .filter((cls) => cls !== '')
  .join(' ');

/**
 * Aesthetic properties for magazine cutout effect
 * Uses AI-generated values or random fallbacks
 * Creates unique paper rotation and positioning
 */
const aesthetic = placeholderData?.aesthetic ?? {
  rotation: Math.random() * 10 - 5, // -5 to 5 degrees
  translateX: Math.random() * 4 - 2, // -2 to 2 pixels
  translateY: Math.random() * 4 - 2, // -2 to 2 pixels
  hasDecorations: Math.random() > 0.5, // 50% chance of tape
};

// Transform string for CSS custom properties
const transform = `rotate(${aesthetic.rotation}deg) translate(${aesthetic.translateX}px, ${aesthetic.translateY}px)`;
---

<div
  class="magazine-cutout-wrapper"
  style={`--magazine-transform: ${transform}; --magazine-rotation: ${aesthetic.rotation}deg;`}
  data-magazine-type={type}
  data-service={placeholderData?.service}
>
  <div class="magazine-cutout-inner">
    <img
      src={placeholderUrl}
      alt={alt}
      width={width}
      height={height}
      loading={eager ? 'eager' : 'lazy'}
      class:list={cssClasses}
      data-magazine-cutout="true"
      data-fallback-url={placeholderData?.fallbackUrl}
    />

    {
      (src == null || src === '') && (
        <div class="placeholder-marker">
          <span class="cut-here">‚úÇÔ∏è - - - - -</span>
          {placeholderData?.service != null &&
            placeholderData.service !== '' && (
              <span class="service-indicator">{placeholderData.service}</span>
            )}
        </div>
      )
    }
  </div>

  <!-- Decoraciones aut√©nticas de magazine cutout -->
  {
    aesthetic.hasDecorations && (
      <>
        <div
          class="tape tape-1"
          style={`--tape-rotation: ${Math.random() * 40 - 20}deg;`}
        />
        <div
          class="tape tape-2"
          style={`--tape-rotation: ${Math.random() * 40 - 20}deg;`}
        />
      </>
    )
  }

  <!-- Indicador de carga para placeholders AI -->
  {
    (src == null || src === '') && (
      <div class="ai-loading-indicator" aria-hidden="true">
        <span class="loading-dots">ü§ñ</span>
      </div>
    )
  }
</div>

<style>
  .magazine-cutout-wrapper {
    position: relative;
    display: inline-block;
    transform: var(--magazine-transform);
    transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    filter: drop-shadow(3px 3px 8px var(--cutout-shadow));
  }

  .magazine-cutout-wrapper:hover {
    transform: rotate(calc(var(--magazine-rotation) * 0.3)) translate(0, -3px);
    filter: drop-shadow(5px 5px 12px rgba(0, 0, 0, 0.25));
  }

  .magazine-cutout-inner {
    position: relative;
    background: linear-gradient(135deg, #f4e5d3 0%, #e8d5b7 50%, #d4c5a0 100%);
    padding: 0.5rem;
    border-radius: 2px;

    /* Efecto de papel texturizado */
    background-image: repeating-linear-gradient(
      45deg,
      transparent,
      transparent 1px,
      var(--torn-edge-color) 1px,
      var(--torn-edge-color) 2px
    );

    /* M√∫ltiples sombras para profundidad */
    box-shadow:
      0 4px 8px var(--cutout-shadow),
      inset 0 1px 2px var(--border-default),
      0 0 0 1px var(--hover-overlay);
  }

  .magazine-cutout-image {
    display: block;
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 1px;

    /* Efecto de borde desgarrado usando clip-path m√°s complejo */
    clip-path: polygon(
      1% 3%,
      3% 0%,
      8% 2%,
      15% 0%,
      22% 3%,
      28% 1%,
      35% 2%,
      42% 0%,
      48% 3%,
      55% 1%,
      62% 2%,
      68% 0%,
      75% 3%,
      82% 1%,
      88% 2%,
      95% 0%,
      98% 3%,
      100% 8%,
      98% 15%,
      100% 22%,
      97% 28%,
      100% 35%,
      98% 42%,
      100% 48%,
      97% 55%,
      100% 62%,
      98% 68%,
      100% 75%,
      97% 82%,
      100% 88%,
      98% 95%,
      100% 97%,
      97% 100%,
      92% 98%,
      85% 100%,
      78% 97%,
      72% 100%,
      65% 98%,
      58% 100%,
      52% 97%,
      45% 100%,
      38% 98%,
      32% 100%,
      25% 97%,
      18% 100%,
      12% 98%,
      5% 100%,
      3% 97%,
      0% 92%,
      2% 85%,
      0% 78%,
      3% 72%,
      0% 65%,
      2% 58%,
      0% 52%,
      3% 45%,
      0% 38%,
      2% 32%,
      0% 25%,
      3% 18%,
      0% 12%,
      2% 5%,
      0% 3%,
      3% 1%
    );

    /* Filtros vintage para autenticidad */
    filter: sepia(0.2) contrast(1.05) brightness(1.02) saturate(0.95);
  }

  /* Tape decorations con rotaci√≥n variable */
  .tape {
    position: absolute;
    background: linear-gradient(
      45deg,
      transparent 20%,
      rgba(245, 222, 179, 0.9) 20%,
      rgba(245, 222, 179, 0.9) 80%,
      transparent 80%
    );
    width: 70px;
    height: 25px;
    transform: rotate(var(--tape-rotation));
    filter: drop-shadow(1px 1px 2px rgba(0, 0, 0, 0.2));
    z-index: 2;

    /* Textura de cinta */
    background-image: repeating-linear-gradient(
      90deg,
      transparent,
      transparent 2px,
      var(--torn-edge-color) 2px,
      var(--torn-edge-color) 4px
    );
  }

  .tape-1 {
    top: -12px;
    left: 15%;
  }

  .tape-2 {
    bottom: -12px;
    right: 20%;
  }

  /* Marcador de placeholder */
  .placeholder-marker {
    position: absolute;
    bottom: 0.25rem;
    right: 0.25rem;
    font-size: 0.65rem;
    color: var(--madfam-gray-600);
    background: rgba(255, 255, 255, 0.9);
    padding: 0.15rem 0.4rem;
    border-radius: 0.25rem;
    font-family: 'Courier New', monospace;
    backdrop-filter: blur(2px);
    border: 1px solid var(--torn-edge-color);
  }

  .cut-here {
    display: block;
    transform: rotate(-1deg);
    margin-bottom: 0.1rem;
  }

  .service-indicator {
    display: block;
    font-size: 0.5rem;
    opacity: 0.7;
    text-transform: uppercase;
  }

  /* Indicador de carga AI */
  .ai-loading-indicator {
    position: absolute;
    top: 0.5rem;
    left: 0.5rem;
    background: rgba(255, 255, 255, 0.95);
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    font-size: 0.75rem;
    animation: aiPulse 2s ease-in-out infinite;
    border: 1px solid var(--torn-edge-color);
  }

  @keyframes aiPulse {
    0%,
    100% {
      opacity: 0.7;
      transform: scale(1);
    }
    50% {
      opacity: 1;
      transform: scale(1.05);
    }
  }

  .loading-dots::after {
    content: '';
    animation: loadingDots 1.5s steps(4, end) infinite;
  }

  @keyframes loadingDots {
    0%,
    20% {
      content: '';
    }
    40% {
      content: '.';
    }
    60% {
      content: '..';
    }
    80%,
    100% {
      content: '...';
    }
  }

  /* Efectos de hover mejorados */
  .magazine-cutout-wrapper:hover .magazine-cutout-image {
    filter: sepia(0.1) contrast(1.1) brightness(1.05) saturate(1.02);
  }

  .magazine-cutout-wrapper:hover .tape {
    transform: rotate(calc(var(--tape-rotation) * 0.7)) scale(1.02);
  }

  /* Variante interactiva */
  .magazine-cutout-wrapper.interactive {
    cursor: pointer;
  }

  .magazine-cutout-wrapper.interactive:active {
    transform: rotate(calc(var(--magazine-rotation) * 0.8)) translate(1px, 1px)
      scale(0.98);
  }

  @keyframes paperFloat {
    0%,
    100% {
      transform: translateY(0px) rotate(0deg);
    }
    25% {
      transform: translateY(-2px) rotate(0.5deg);
    }
    50% {
      transform: translateY(-1px) rotate(-0.3deg);
    }
    75% {
      transform: translateY(-3px) rotate(0.2deg);
    }
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .magazine-cutout-wrapper {
      filter: drop-shadow(2px 2px 6px var(--cutout-shadow));
    }

    .tape {
      width: 50px;
      height: 20px;
    }

    .placeholder-marker {
      font-size: 0.55rem;
      padding: 0.1rem 0.3rem;
    }

    /* Simplificar clip-path en mobile para rendimiento */
    .magazine-cutout-image {
      clip-path: polygon(
        2% 0%,
        98% 2%,
        100% 8%,
        98% 92%,
        100% 98%,
        92% 100%,
        8% 98%,
        0% 92%,
        2% 8%
      );
    }
  }

  /* High contrast mode */
  @media (prefers-contrast: high) {
    .magazine-cutout-image {
      filter: none;
      border: 2px solid currentColor;
      clip-path: none;
      border-radius: 4px;
    }

    .tape {
      background: currentColor;
      opacity: 0.3;
    }
  }

  /* Reduced motion */
  @media (prefers-reduced-motion: reduce) {
    .magazine-cutout-wrapper,
    .magazine-cutout-wrapper:hover,
    .tape,
    .ai-loading-indicator {
      animation: none;
      transition: none;
      transform: none;
    }
  }

  /* Print styles */
  @media print {
    .magazine-cutout-wrapper {
      filter: none;
      transform: none;
    }

    .magazine-cutout-image {
      filter: none;
      clip-path: none;
    }

    .tape,
    .placeholder-marker,
    .ai-loading-indicator {
      display: none;
    }
  }
</style>

<script>
  /**
   * Client-side enhancement for AI placeholder loading experience
   * Handles loading states, error recovery, and fallback mechanisms
   */
  document.addEventListener('DOMContentLoaded', () => {
    // Select all magazine cutout images
    const placeholderImages = document.querySelectorAll(
      '[data-magazine-cutout="true"]'
    );

    placeholderImages.forEach((img) => {
      const wrapper = img.closest('.magazine-cutout-wrapper');
      const loadingIndicator = wrapper?.querySelector('.ai-loading-indicator');

      if (img instanceof HTMLImageElement) {
        /**
         * Handle successful image load
         * Fades out and removes loading indicator
         */
        img.addEventListener('load', () => {
          if (loadingIndicator) {
            (loadingIndicator as HTMLElement).style.opacity = '0';
            setTimeout(() => loadingIndicator.remove(), 300);
          }
        });

        /**
         * Handle image loading errors
         * Attempts fallback URL or shows error state
         */
        img.addEventListener('error', () => {
          const fallbackUrl = img.getAttribute('data-fallback-url');
          if (fallbackUrl && fallbackUrl !== '') {
            // Try fallback URL
            img.src = fallbackUrl;
            img.removeAttribute('data-fallback-url');
          } else if (loadingIndicator) {
            // Show error state
            loadingIndicator.textContent = '‚ö†Ô∏è Error';
            (loadingIndicator as HTMLElement).style.background =
              'rgba(255, 200, 200, 0.95)';
          }
        });
      }
    });
  });
</script>
