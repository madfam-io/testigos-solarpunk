---
/**
 * @fileoverview PWAInstaller Component
 *
 * Progressive Web App installation prompt and service worker management.
 * Provides a custom installation UI that appears when the browser's install
 * criteria are met, handles service worker registration, and manages updates.
 *
 * Features:
 * - Custom install prompt with branded styling
 * - Service worker registration and update handling
 * - Dismissal with 7-day cooldown period
 * - Success notification on installation
 * - Standalone mode detection
 * - Responsive design for mobile devices
 *
 * @component
 * @example
 * ```astro
 * // Simply include in your layout
 * <PWAInstaller />
 * ```
 *
 * Browser Support:
 * - Chrome/Edge: Full support
 * - Firefox: Service worker only (no install prompt)
 * - Safari: Limited PWA support
 */
---

<div id="pwa-installer" class="pwa-installer" hidden>
  <div class="pwa-installer__content">
    <h3>¡Instala Testigos de Solarpunk!</h3>
    <p>Accede rápidamente al evangelio verde desde tu dispositivo</p>
    <div class="pwa-installer__buttons">
      <button id="pwa-install-btn" class="btn btn--primary">
        Instalar App
      </button>
      <button id="pwa-dismiss-btn" class="btn btn--secondary">
        Ahora no
      </button>
    </div>
  </div>
</div>

<style>
  .pwa-installer {
    position: fixed;
    bottom: 2rem;
    left: 50%;
    transform: translateX(-50%);
    background: var(--madfam-black, #212121);
    color: var(--madfam-white, #ffffff);
    padding: 1.5rem;
    border-radius: 0.5rem;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
    z-index: 1000;
    max-width: 90vw;
    width: 400px;
    animation: slideUp 0.3s ease-out;
  }

  .pwa-installer__content h3 {
    margin: 0 0 0.5rem;
    color: var(--madfam-yellow, #ffc107);
    font-size: 1.25rem;
  }

  .pwa-installer__content p {
    margin: 0 0 1rem;
    opacity: 0.9;
  }

  .pwa-installer__buttons {
    display: flex;
    gap: 1rem;
  }

  .btn {
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 0.25rem;
    font-weight: 600;
    cursor: pointer;
    transition:
      transform 0.2s,
      box-shadow 0.2s;
    font-family: var(--font-primary, sans-serif);
  }

  .btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
  }

  .btn--primary {
    background: var(--madfam-yellow, #ffc107);
    color: var(--madfam-black, #212121);
  }

  .btn--secondary {
    background: transparent;
    color: var(--madfam-white, #ffffff);
    border: 1px solid var(--madfam-white, #ffffff);
  }

  @keyframes slideUp {
    from {
      transform: translateX(-50%) translateY(100%);
      opacity: 0;
    }
    to {
      transform: translateX(-50%) translateY(0);
      opacity: 1;
    }
  }

  @media (max-width: 480px) {
    .pwa-installer {
      bottom: 1rem;
      padding: 1rem;
    }

    .pwa-installer__buttons {
      flex-direction: column;
    }

    .btn {
      width: 100%;
    }
  }
</style>

<script>
  /**
   * PWA Installation and Service Worker Management
   * Handles the complete PWA lifecycle including registration,
   * updates, installation prompts, and user interactions
   */

  /**
   * Service Worker Registration
   * Registers the service worker and sets up update monitoring
   */
  if ('serviceWorker' in navigator) {
    window.addEventListener('load', async () => {
      try {
        const registration = await navigator.serviceWorker.register(
          '/testigos-solarpunk/sw.js',
          {
            scope: '/testigos-solarpunk/',
          }
        );

        console.log('Service Worker registrado:', registration);

        // Check for updates every hour
        setInterval(
          () => {
            registration.update();
          },
          60 * 60 * 1000
        );

        // Handle service worker updates
        registration.addEventListener('updatefound', () => {
          const newWorker = registration.installing;

          newWorker?.addEventListener('statechange', () => {
            if (
              newWorker.state === 'installed' &&
              navigator.serviceWorker.controller
            ) {
              // New content is available
              console.log('Nueva versión disponible');
              // TODO: Show update notification banner
            }
          });
        });
      } catch (error) {
        console.error('Error registrando Service Worker:', error);
      }
    });
  }

  /**
   * PWA Installation Handler
   * Manages the installation prompt and user interactions
   */
  let deferredPrompt: any; // BeforeInstallPromptEvent
  const installer = document.getElementById('pwa-installer');
  const installBtn = document.getElementById('pwa-install-btn');
  const dismissBtn = document.getElementById('pwa-dismiss-btn');

  /**
   * Intercept browser install prompt
   * Shows custom UI instead of default browser prompt
   */
  window.addEventListener('beforeinstallprompt', (e) => {
    // Prevent the default browser prompt
    e.preventDefault();
    deferredPrompt = e;

    // Show custom prompt if not previously dismissed
    if (installer && !localStorage.getItem('pwa-dismissed')) {
      installer.hidden = false;
    }
  });

  /**
   * Handle install button click
   * Triggers the browser's install flow
   */
  installBtn?.addEventListener('click', async () => {
    if (!deferredPrompt) return;

    // Show the browser's install prompt
    deferredPrompt.prompt();

    // Wait for user's response
    const { outcome } = await deferredPrompt.userChoice;
    console.log(`Usuario eligió: ${outcome}`);

    // Clean up
    deferredPrompt = null;
    if (installer) installer.hidden = true;
  });

  /**
   * Handle dismiss button click
   * Hides prompt and sets 7-day cooldown
   */
  dismissBtn?.addEventListener('click', () => {
    if (installer) installer.hidden = true;
    localStorage.setItem('pwa-dismissed', 'true');

    // Re-enable prompt after 7 days
    setTimeout(
      () => {
        localStorage.removeItem('pwa-dismissed');
      },
      7 * 24 * 60 * 60 * 1000
    );
  });

  /**
   * Handle successful installation
   * Shows success message and cleans up UI
   */
  window.addEventListener('appinstalled', () => {
    console.log('PWA instalada exitosamente');
    if (installer) installer.hidden = true;

    // Create and show success notification
    const message = document.createElement('div');
    message.className = 'success-message';
    message.textContent = '¡Aleluya! La app ha sido instalada';
    message.style.cssText = `
      position: fixed;
      top: 2rem;
      left: 50%;
      transform: translateX(-50%);
      background: var(--madfam-green, #4CAF50);
      color: var(--text-on-success, #000000);
      padding: 1rem 2rem;
      border-radius: 0.5rem;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
      z-index: 1001;
      animation: slideDown 0.3s ease-out;
    `;

    document.body.appendChild(message);

    // Remove notification after 5 seconds
    setTimeout(() => {
      message.remove();
    }, 5000);
  });

  /**
   * Detect standalone mode
   * App is running as installed PWA
   */
  if (window.matchMedia('(display-mode: standalone)').matches) {
    console.log('App ejecutándose en modo standalone');
    // TODO: Adjust UI for app mode (hide install prompts, etc.)
  }
</script>
