---
import BaseLayout from '../layouts/BaseLayout.astro';
import { useTranslations, detectLanguage, routes } from '@/i18n/config';

let basePath =
  import.meta.env.BASE_URL != null && import.meta.env.BASE_URL !== ''
    ? import.meta.env.BASE_URL
    : '/testigos-solarpunk';

// Ensure basePath doesn't end with a slash
if (basePath.endsWith('/')) {
  basePath = basePath.slice(0, -1);
}

// Get the requested path
const requestedPath = Astro.url.pathname.replace(basePath, '');

// Check if this is a non-language-prefixed route that should redirect
const pathSegments = requestedPath.split('/').filter(Boolean);
const firstSegment = pathSegments[0];

// If the path doesn't start with a language prefix and matches a known route
if (
  firstSegment !== undefined &&
  firstSegment !== '' &&
  firstSegment !== 'es' &&
  firstSegment !== 'en'
) {
  // Check if this matches any Spanish routes
  const spanishRoutes = Object.values(routes.es) as string[];
  if (spanishRoutes.includes(firstSegment)) {
    // Redirect to Spanish version
    const redirectPath = `${basePath}/es${requestedPath.length > 0 && requestedPath.startsWith('/') ? '' : '/'}${requestedPath}`;
    return Astro.redirect(redirectPath, 301);
  }

  // Check if this matches any English routes
  const englishRoutes = Object.values(routes.en) as string[];
  if (englishRoutes.includes(firstSegment)) {
    // Find the Spanish equivalent and redirect
    const routeKey = Object.entries(routes.en).find(
      ([_, value]) => value === firstSegment
    )?.[0];
    if (
      routeKey !== undefined &&
      routeKey !== '' &&
      routes.es[routeKey as keyof typeof routes.es] !== undefined
    ) {
      const spanishEquivalent = routes.es[routeKey as keyof typeof routes.es];
      const redirectPath = `${basePath}/es/${spanishEquivalent}${requestedPath.substring(firstSegment.length)}`;
      return Astro.redirect(redirectPath, 301);
    }
  }
}

// Detect user's preferred language from browser
const acceptLang = Astro.request.headers.get('accept-language');
const detectedLang =
  acceptLang !== null && acceptLang !== '' ? detectLanguage(acceptLang) : null;
const lang = detectedLang !== null ? detectedLang : 'es';
const t = useTranslations(lang);
---

<BaseLayout title={t('error.404.title')} lang={lang}>
  <section class="error-section">
    <div class="container text-center">
      <h1 class="error-code">404</h1>
      <h2 class="error-title">{t('error.404.heading')}</h2>
      <p class="error-message">
        {t('error.404.message')}
      </p>
      <div class="error-actions">
        <a href={`${basePath}/${lang}/`} class="btn btn-primary"
          >{t('error.404.home')}</a
        >
        <a
          href={`${basePath}/${lang}/${lang === 'es' ? 'personajes' : 'characters'}/`}
          class="btn btn-secondary">{t('error.404.explore')}</a
        >
      </div>
    </div>
  </section>
</BaseLayout>

<style>
  .error-section {
    min-height: 70vh;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: var(--espacio-xxl) 0;
  }

  .error-code {
    font-size: 8rem;
    font-weight: bold;
    background: linear-gradient(
      135deg,
      var(--verde-sostenible) 0%,
      var(--amarillo-solar) 100%
    );
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    margin-bottom: var(--espacio-md);
  }

  .error-title {
    color: var(--texto-primario);
    margin-bottom: var(--espacio-lg);
  }

  .error-message {
    color: var(--texto-secundario);
    font-size: 1.25rem;
    max-width: 500px;
    margin: 0 auto var(--espacio-xl);
  }

  .error-actions {
    display: flex;
    gap: var(--espacio-md);
    justify-content: center;
    flex-wrap: wrap;
  }

  @media (max-width: 768px) {
    .error-code {
      font-size: 5rem;
    }

    .error-actions {
      flex-direction: column;
      align-items: center;
    }

    .error-actions .btn {
      width: 200px;
    }
  }
</style>
