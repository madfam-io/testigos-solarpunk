---
import BaseLayout from '../../../layouts/BaseLayout.astro';
import { useTranslations } from '@/i18n/config';
import CharacterCard from '../../../components/CharacterCard.astro';
import AnimatedCharacterCard from '../../../components/AnimatedCharacterCard.astro';
import { getCollection, type CollectionEntry } from 'astro:content';
import { evangelistas } from '../../../lib/character-constants';

const basePath = import.meta.env.BASE_URL ?? '';
const characters: CollectionEntry<'characters'>[] =
  await getCollection('characters');

const lang = 'en';
const _t = useTranslations(lang);
---

<BaseLayout lang={lang} title="Personajes">
  <section class="hero-section">
    <div class="container">
      <h1 class="text-gradient">Personajes del Universo</h1>
      <p class="lead">
        Conoce a los habitantes de Neo-Cuernavaca y otros rincones del mundo
        solarpunk. Cada personaje representa una faceta de la esperanza y la
        innovaci√≥n sostenible.
      </p>
    </div>
  </section>

  <section class="filters-section">
    <div class="container">
      <div class="filter-buttons">
        <button class="filter-btn active" data-filter="todos">Todos</button>
        <button class="filter-btn" data-filter="protagonista">
          <span class="emoji-cutout emoji-sm theme-solar">‚≠ê</span> Protagonistas
        </button>
        <button class="filter-btn" data-filter="evangelista">
          <span class="emoji-cutout emoji-sm theme-green">üì¢</span> Evangelistas
        </button>
        <button class="filter-btn" data-filter="apoyo">
          <span class="emoji-cutout emoji-sm theme-purple">ü§ù</span> Apoyo
        </button>
      </div>
    </div>
  </section>

  <section class="characters-section">
    <div class="container">
      <div class="grid grid-3" id="characters-grid">
        {
          characters.map((character) => {
            const isEvangelista = evangelistas.includes(character.id);
            const roleFilter =
              isEvangelista === true
                ? 'evangelista'
                : character.data.rol.toLowerCase().replace(/\s+/g, '-');
            const cardElement =
              isEvangelista === true ? (
                <AnimatedCharacterCard
                  id={character.id}
                  nombre={character.data.nombre}
                  rol={character.data.rol}
                  edad={character.data.edad}
                  ocupacion={character.data.ocupacion}
                  descripcionBreve={`${character.data.historia.substring(0, 150)}...`}
                  isEvangelista={true}
                />
              ) : (
                <CharacterCard
                  id={character.id}
                  nombre={character.data.nombre}
                  rol={character.data.rol}
                  edad={character.data.edad}
                  ocupacion={character.data.ocupacion}
                  descripcionBreve={`${character.data.historia.substring(0, 150)}...`}
                />
              );

            return (
              <div
                class="character-wrapper"
                data-role={roleFilter}
                data-character-type={
                  isEvangelista === true ? 'evangelista' : 'regular'
                }
              >
                {cardElement}
              </div>
            );
          })
        }
      </div>
    </div>
  </section>

  <section class="cta-section">
    <div class="container text-center">
      <h2>¬øQuieres conocer m√°s sobre estos personajes?</h2>
      <p class="text-muted mb-3">
        Explora los guiones para ver a estos personajes en acci√≥n
      </p>
      <a href={`${basePath}/en/scripts/`} class="btn btn-primary">Ver Guiones</a
      >
    </div>
  </section>
</BaseLayout>

<style>
  .hero-section {
    background-color: var(--fondo-secundario);
    padding: var(--espacio-xxl) 0;
    text-align: center;
  }

  .lead {
    font-size: 1.25rem;
    max-width: 700px;
    margin: 0 auto;
    color: var(--texto-secundario);
  }

  .filters-section {
    padding: var(--espacio-xl) 0;
    background-color: var(--fondo-primario);
    position: sticky;
    top: 60px;
    z-index: 50;
    box-shadow: 0 2px 4px var(--sombra-suave);
  }

  .filter-buttons {
    display: flex;
    gap: var(--espacio-md);
    justify-content: center;
    flex-wrap: wrap;
  }

  .filter-btn {
    background-color: transparent;
    border: 2px solid var(--borde-claro);
    padding: var(--espacio-sm) var(--espacio-lg);
    border-radius: 25px;
    cursor: pointer;
    transition: all var(--transicion-rapida);
    font-weight: 500;
    color: var(--texto-primario);
  }

  .filter-btn:hover {
    border-color: var(--verde-sostenible);
    color: var(--verde-sostenible);
  }

  .filter-btn.active {
    background-color: var(--verde-sostenible);
    border-color: var(--verde-sostenible);
    color: var(--text-on-accent, #000000);
  }

  .characters-section {
    padding: var(--espacio-xxl) 0;
  }

  .cta-section {
    background-color: var(--fondo-secundario);
    padding: var(--espacio-xxl) 0;
  }

  /* Character wrapper animations */
  .character-wrapper {
    transition: all 0.3s ease;
    opacity: 1;
    transform: translateY(0);
  }

  .character-wrapper[data-character-type='evangelista'] {
    position: relative;
  }

  .character-wrapper[data-character-type='evangelista']::before {
    content: 'üì¢';
    position: absolute;
    top: -5px;
    right: -5px;
    z-index: 10;
    font-size: 1.2rem;
    filter: drop-shadow(2px 2px 4px rgba(0, 0, 0, 0.3));
  }
</style>

<script>
  // Character filter functionality
  document.addEventListener('DOMContentLoaded', () => {
    const filterButtons = document.querySelectorAll('.filter-btn');
    const characterWrappers = document.querySelectorAll('.character-wrapper');

    filterButtons.forEach((btn) => {
      btn.addEventListener('click', () => {
        const filter = (btn as HTMLElement).dataset.filter;

        // Update active state
        filterButtons.forEach((b) => b.classList.remove('active'));
        btn.classList.add('active');

        // Filter characters with smooth animation
        characterWrappers.forEach((wrapper, index) => {
          const htmlWrapper = wrapper as HTMLElement;
          const shouldShow =
            filter === 'todos' ||
            htmlWrapper.dataset.role === filter ||
            htmlWrapper.dataset.characterType === filter;

          if (shouldShow) {
            htmlWrapper.style.display = 'block';
            // Stagger animation for visual appeal
            setTimeout(() => {
              htmlWrapper.style.opacity = '1';
              htmlWrapper.style.transform = 'translateY(0)';
            }, index * 100);
          } else {
            htmlWrapper.style.opacity = '0';
            htmlWrapper.style.transform = 'translateY(20px)';
            setTimeout(() => {
              htmlWrapper.style.display = 'none';
            }, 300);
          }
        });
      });
    });
  });
</script>
